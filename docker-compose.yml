version: "3.8"

services:

# PRODUCTION SERVICE
  app-prod-1:
    image: "${APP_IMAGE}:${APP_TAG}"
    restart: always
    ports:
      - 5000:5000
    env_file:
      - .env
    networks:
      - my_network

  app-prod-2:
    image: "${APP_IMAGE}:${APP_TAG}"
    restart: always
    ports:
      - 5001:5000
    env_file:
      - .env
    networks:
      - my_network

# STAGING SERVICE
  app-stg-1:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5002:5000
    env_file:
      - .env
    networks:
      - my_network

  app-stg-2:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5003:5000
    env_file:
      - .env
    networks:
      - my_network

# DEVELOPMENT SERVICE
  app-dev:
    build:
      context: ./app
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5004:5000
    env_file:
      - .env
    networks:
      - my_network

# NGINX
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./certbot/dhparam.pem:/nginx/dhparam.pem
    network_mode: host

# CERTBOT
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

# DATABASE SERVICE
  database:
    container_name: database
    build:
      context: ./database
      dockerfile: Dockerfile
    restart: always
    ports:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - my_network

networks:
  my_network:
    name: my_network

volumes:
  pgdata:
    name: pgdata